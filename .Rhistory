# Labelling each point with the name of each site
geom_text(aes(x = decLong - .23, y = decLat, label = Site),  #Sets the location of the markers, using shadowtext for clarity
col = 'black',
family = "Times") +
# Adding a scale bar
annotation_scale(location= "bl", width_hint = .25) +
# Adding a north arrow
annotation_north_arrow(location = "tl",
style = north_arrow_fancy_orienteering()) +
#changing the text style
theme(title = element_text(face = "bold", family = "Times"),
#changing the color of the land area (because I only have a shapefile for the sea, the land color is the same as background)
panel.background = element_rect(fill ='#FED789FF'),
# Getting rid of the ticks on each axis
#axis.text.x = element_blank(),
#axis.text.y = element_blank(),
#changing the position of the legend so that is is on the map and not off to the side
legend.position.inside = c(0.85, 0.1),
#giving the legend a white background with a black outline
legend.background = element_rect(fill = "white", color = "black"),
#making the grid lines transparent
panel.grid.major=element_line(colour="transparent"),
panel.grid.minor=element_line(colour="transparent"),
legend.key.size = unit(0.5, "cm")  # Adjust size of legend keys if needed
) +
guides(
fill = guide_none(),  # Remove legend for Site (fill)
shape = guide_legend(title = "Farm Type")  # Keep legend for Farm Type
)
PS_site_map
library(grid)
install.packages(grid)
library(grid)
##move the legend onto the map
# Define custom colors for sites
site_colors <- c("#C77CFF", '#F8766D', "#00BFC4", "#7CAE00")
names(site_colors) <- unique(Sites$Site)
# Define custom shapes for farm types
farm_shapes <- c("Intertidal" = 21, "Subtidal" = 22)  # Using shapes 21 and 22 as examples
# Create the main map plot
map_plot <- ggplot() +
geom_sf(data = shore, fill = "#A4BED5FF", col = "#FED789FF") +
geom_point(data = Sites,
aes(x = decLong, y = decLat, fill = Site, shape = farmType),
size = 5,
col = "black") +
scale_fill_manual(values = site_colors, name = "Site") +
scale_shape_manual(values = farm_shapes, name = "Farm Type") +
xlab("Latitude") +
ylab("Longitude") +
coord_sf(xlim = c(-123.4, -121.3), ylim = c(47, 48.2)) +
theme_minimal() +
geom_text(aes(x = decLong - 0.23, y = decLat, label = Site),
col = 'black',
family = "Times") +
annotation_scale(location = "bl", width_hint = 0.25) +
annotation_north_arrow(location = "tl",
style = north_arrow_fancy_orienteering()) +
theme(
title = element_text(face = "bold", family = "Times"),
panel.background = element_rect(fill = '#FED789FF'),
legend.position = "none",  # Hide the default legend
panel.grid.major = element_line(colour = "transparent"),
panel.grid.minor = element_line(colour = "transparent")
)
# Create a separate legend plot for farmType
legend_plot <- ggplot() +
scale_shape_manual(values = farm_shapes, name = "Farm Type") +
guides(shape = guide_legend(override.aes = list(size = 5))) +
theme_void() +
theme(legend.position = "bottom")
# Combine the map plot and legend plot
final_plot <- plot_grid(
map_plot,
get_legend(legend_plot),  # Extract legend from legend_plot
ncol = 1,
rel_heights = c(1, 0.1)  # Adjust heights to fit the legend on the map
)
# Define custom colors for sites
site_colors <- c("#C77CFF", '#F8766D', "#00BFC4", "#7CAE00")
names(site_colors) <- unique(Sites$Site)
# Define custom shapes for farm types
farm_shapes <- c("Intertidal" = 21, "Subtidal" = 22)  # Using shapes 21 and 22 as examples
# Create the main map plot
map_plot <- ggplot() +
geom_sf(data = shore, fill = "#A4BED5FF", col = "#FED789FF") +
geom_point(data = Sites,
aes(x = decLong, y = decLat, fill = Site, shape = farmType),
size = 5,
col = "black") +
scale_fill_manual(values = site_colors, name = "Site") +
scale_shape_manual(values = farm_shapes, name = "Farm Type") +
xlab("Latitude") +
ylab("Longitude") +
coord_sf(xlim = c(-123.4, -121.3), ylim = c(47, 48.2)) +
theme_minimal() +
geom_text(aes(x = decLong - 0.23, y = decLat, label = Site),
col = 'black',
family = "Times") +
annotation_scale(location = "bl", width_hint = 0.25) +
annotation_north_arrow(location = "tl",
style = north_arrow_fancy_orienteering()) +
theme(
title = element_text(face = "bold", family = "Times"),
panel.background = element_rect(fill = '#FED789FF'),
legend.position = "none",  # Hide the default legend
panel.grid.major = element_line(colour = "transparent"),
panel.grid.minor = element_line(colour = "transparent")
)
# Create a separate legend plot for farmType
legend_plot <- ggplot() +
scale_shape_manual(values = farm_shapes, name = "Farm Type") +
guides(shape = guide_legend(override.aes = list(size = 5))) +
theme_void() +
theme(
legend.position = "bottom",
legend.title = element_text(face = "bold")
)
# Extract the legend from the legend_plot
legend <- get_legend(legend_plot)
# Combine the map plot and legend plot manually
final_plot <- plot_grid(
map_plot,
legend,
ncol = 1,
rel_heights = c(1, 0.1)  # Adjust heights to fit the legend on the map
)
#Read in the datat
man_Do_Temp  <- read.csv("man_Do_Temp.csv")
chelsea_Do_Temp <- read.csv("chelsea_Do_Temp.csv")
thorn_Do_Temp <- read.csv("thorn_Do_Temp.csv")
hood_Do_Temp <- read.csv("hood_Do_Temp.csv")
#inspect the data
str(chelsea_Do_Temp)
str(thorn_Do_Temp)
str(hood_Do_Temp)
##merge all data into one file
allDoTemp <- rbind(man_Do_Temp, chelsea_Do_Temp, hood_Do_Temp, thorn_Do_Temp) %>% filter(datetime != "NA")
# Convert the Date.Time..GMT.07.00 column to date-time format
allDoTemp <- allDoTemp %>%
mutate(Date.Time..GMT.07.00 = mdy_hm(Date.Time..GMT.07.00, tz = "Etc/GMT+7"))
library(dplyr)
##merge all data into one file
allDoTemp <- rbind(man_Do_Temp, chelsea_Do_Temp, hood_Do_Temp, thorn_Do_Temp) %>% filter(datetime != "NA")
# Convert the Date.Time..GMT.07.00 column to date-time format
allDoTemp <- allDoTemp %>%
mutate(Date.Time..GMT.07.00 = mdy_hm(Date.Time..GMT.07.00, tz = "Etc/GMT+7"))
library(lubridate)
# Convert the Date.Time..GMT.07.00 column to date-time format
allDoTemp <- allDoTemp %>%
mutate(Date.Time..GMT.07.00 = mdy_hm(Date.Time..GMT.07.00, tz = "Etc/GMT+7"))
# Filter out rows where Date.Time..GMT.07.00 is less than or equal to "2024-04-30 12:00:00"
filtered_data <- allDoTemp %>%
filter(Date.Time..GMT.07.00 >= ymd_hms("2023-05-01 12:00:00", tz = "Etc/GMT+7"))
# Converting to POSIXct datetime
filtered_data$Date.Time..GMT.07.00 <- as.POSIXct(filtered_data$Date.Time..GMT.07.00, format = "%Y-%m-%d %H:%M:%S")
filtered_data <- filtered_data[order(filtered_data$Date.Time..GMT.07.00), ]
##weekly temps
weekly_tempavg <- filtered_data %>%
group_by(Site, Date = as.Date(floor_date(Date.Time..GMT.07.00, "week"))) %>% #group by date
summarize(Average_Temp = mean(Temp_C, na.rm = TRUE)) #get averages
ggplot(data= daily_tempavg, aes(x = Date, y = Average_Temp, color = Site)) +
geom_line(na.rm = TRUE) +
labs(title = "Seawater Temperature Across Time and Sites", x = " ", y = "Temperature (C)", color = "Site")
library(ggplot2)
ggplot(data= daily_tempavg, aes(x = Date, y = Average_Temp, color = Site)) +
geom_line(na.rm = TRUE) +
labs(title = "Seawater Temperature Across Time and Sites", x = " ", y = "Temperature (C)", color = "Site")
View(filtered_data)
ggplot(data= weeekly_tempavg, aes(x = Date, y = Average_Temp, color = Site)) +
geom_line(na.rm = TRUE) +
labs(title = "Seawater Temperature Across Time and Sites", x = " ", y = "Temperature (C)", color = "Site")
ggplot(data= weekly_tempavg, aes(x = Date, y = Average_Temp, color = Site)) +
geom_line(na.rm = TRUE) +
labs(title = "Seawater Temperature Across Time and Sites", x = " ", y = "Temperature (C)", color = "Site")
ggplot(data= weekly_tempavg, aes(x = Date, y = Average_Temp, color = Site)) +
geom_line(size = 0.75, na.rm = TRUE) +
labs(title = "Seawater Temperature Across Time and Sites", x = " ", y = "Temperature (C)", color = "Site")
##weekly DO
weekly_DOavg <- filtered_data %>%
group_by(Site, Date = as.Date(floor_date(Date.Time..GMT.07.00, "week"))) %>% #group by date
summarize(Average_DO = mean(DO_mgL, na.rm = TRUE)) #get averages
ggplot(data= weekly_DOavg, aes(x = Date, y = Average_DO, color = Site)) +
geom_line(size = 0.75, na.rm = TRUE) +
labs(title = "Seawater Oxygen Concentrations Across Time and Sites", x = " ", y = "Dissolved Oxygen (mg/L)", color = "Site")
# Read in and prepare the data --------------------------------------------
#read in the mortality data
mortdat <- read.csv(here("C:/Users/Acidification/OneDrive - UW/Desktop/HannahOyster2024/MAY_2023_JULY_2024_morts.csv"))
########Examine mortality between sites in field study###
# Load packages -----------------------------------------------------------
library(tidyverse)
library(here)
library(nlme)
library(lme4)
# Read in and prepare the data --------------------------------------------
#read in the mortality data
mortdat <- read.csv(here("C:/Users/Acidification/OneDrive - UW/Desktop/HannahOyster2024/MAY_2023_JULY_2024_morts.csv"))
bagmortdat <- read.csv(here("C:/Users/Acidification/OneDrive - UW/Desktop/HannahOyster2024/MAY_2023_JULY_2024_MORTSBYBAG.csv"))
#Ensure data structure is correct
mortdat <- mortdat %>% mutate_at(c("Site", "Colour", "Month"), as.factor)
bagmortdat <- bagmortdat %>% mutate_at(c("Site", "Bag_Col", "Month", "Bag_no", "Month_no"), as.factor)
View(widebagmort)
# Calculate proportaional survival and mortality --------------------------
#pivot the data wider by months
widebagmort <- pivot_wider(survdat[-c(6, 3, 7, 9)], names_from = Month_year, values_from = Mort_count)#C6 is removed because this is numerical month
#replace NA in the mortality columns with 0
widebagmort <- widebagmort %>%
mutate_at(vars(May_2023, June_2023, July_2023, August_2023, September_2023, October_2023, May_2024, June_2024, July_2024), ~replace_na(., 0))
widebagmort <- widebagmort %>%
group_by(Site, Bag_Col, Bag_no, )
summarise(widebagmort)
widebagmort$April_2023_survivors <- 50
widebagmort$May_2023_survivors <- widebagmort$April_2023_survivors-widebagmort$May_2023
widebagmort$June_2023_survivors <- widebagmort$May_2023_survivors-widebagmort$June_2023
widebagmort$July_2023_survivors <- widebagmort$June_2023_survivors-widebagmort$July_2023
widebagmort$August_2023_survivors <- widebagmort$July_2023_survivors-widebagmort$August_2023
widebagmort$September_2023_survivors <- widebagmort$August_2023_survivors-widebagmort$September_2023
widebagmort$October_2023_survivors <- widebagmort$September_2023_survivors-widebagmort$October_2023
widebagmort$May_2024_survivors <- widebagmort$October_2023_survivors-widebagmort$May_2024
widebagmort$June_2024_survivors <- widebagmort$May_2024_survivors-widebagmort$June_2024
widebagmort$July_2024_survivors <- widebagmort$June_2024_survivors-widebagmort$July_2024
# Statistical analysis ----------------------------------------------------
#Question - are there differences in mortality between months, sites, and ploidy
#We have multiple cages - each cage is a rep
#Inspect the data
hist(mortdat$Morts)
hist(bagmortdat$Mort_count)
View(mortdat)
View(survdat)
#Basic three way ANOVA
mort.aov1 <- aov(Mort_count~Site*Bag_Col*Month_year, bagmortdat)
View(mort.aov1)
summary(mort.aov1)
View(mortdat)
View(mortdat)
View(bagmortdat)
#No interactions are present so we can drop these
mort.aov2 <- aov(Mort_count~Site+Bag_Col+Month_year, bagmortdat)
summary(mort.aov2)
TukeyHSD(mort.aov2)
##two way ANOVA
mort.aov_Site <- aov(Mort_count~Site, data = bagmortdat)
summary(mort.aov_Site)
mort.aov_Ploidy <- aov(Mort_count~Bag_Col, data = bagmortdat)
summary(mort.aov_Ploidy)
hist(bagmortdat$Mort_count)
View(bagmortdat)
View(widebagmort)
##calculate survival proportion
widebagmort$May_2023_prop <- widebagmort$May_2023_survivors/50
widebagmort$June_2023_prop <- widebagmort$June_2023_survivors/widebagmort$May_2023_survivors
widebagmort$July_2023_prop <- widebagmort$July_2023_survivors/widebagmort$June_2023_survivors
widebagmort$August_2023_prop <- widebagmort$August_2023_survivors/widebagmort$July_2023_survivors
widebagmort$September_2023_prop <- widebagmort$September_2023_survivors/widebagmort$August_2023_survivors
widebagmort$October_2023_prop <- widebagmort$October_2023_survivors/widebagmort$September_2023_survivors
widebagmort$May_2024_prop <- widebagmort$May_2024_survivors/widebagmort$October_2023_survivors
widebagmort$June_2024_prop <- widebagmort$June_2024_survivors/widebagmort$May_2024_survivors
widebagmort$July_2024_prop <- widebagmort$July_2024_survivors/widebagmort$June_2024_survivors
##load packages
library(tidyverse)
library(here)
library(nlme)
library(lme4)
#read in data
resp_2324 <- read.csv("Resp_processed_2324.csv")
#read in data
resp_2324 <- read.csv("Resp_processed_June_2324.csv")
View(widebagmort)
mean_survival_proportion %>%
ggplot(aes(x=Date, y=meansurv, colour = Bag_Col, group=Bag_Col))+
geom_errorbar(size = .75, aes(ymin=meansurv-semsurv, ymax=meansurv+semsurv))+
geom_line(size = .75)+
facet_grid(~Site)+
scale_colour_paletteer_d(("MoMAColors::Andri"), name = "Ploidy", labels = c("Induced Triploid", "Diploid", "Mated Triploid"))+
xlab("Month")+ ylab("Number of survivors")+
ggtitle("Number of survivors since experiment start")+
theme(axis.text.x = element_text(angle = 90, hjust = 1))
library(tidyverse)
library(here)
library(survival)
library(ggfortify)
library(ggsurvfit)
library(survminer)
library(gridExtra)
library(frailtyEM)
library(paletteer)
mean_survival_proportion %>%
ggplot(aes(x=Date, y=meansurv, colour = Bag_Col, group=Bag_Col))+
geom_errorbar(size = .75, aes(ymin=meansurv-semsurv, ymax=meansurv+semsurv))+
geom_line(size = .75)+
facet_grid(~Site)+
scale_colour_paletteer_d(("MoMAColors::Andri"), name = "Ploidy", labels = c("Induced Triploid", "Diploid", "Mated Triploid"))+
xlab("Month")+ ylab("Number of survivors")+
ggtitle("Number of survivors since experiment start")+
theme(axis.text.x = element_text(angle = 90, hjust = 1))
#Plot the survival, another color option is "MoMAColors::Andri" "nationalparkcolors::Arches"
mean_survival_proportion %>%
ggplot(aes(x=Date, y=meansurv, colour = Bag_Col, group=Bag_Col))+
geom_errorbar(size = .75, aes(ymin=meansurv-semsurv, ymax=meansurv+semsurv))+
geom_line(size = .75)+
facet_grid(~Site)+
scale_colour_paletteer_d(("MoMAColors::Andri"), name = "Ploidy", labels = c("Induced Triploid", "Diploid", "Mated Triploid"))+
xlab("Date")+ ylab("Number of survivors (± SEM)")+
ggtitle("Number of survivors since experiment start")+
theme(axis.text.x = element_text(angle = 90, hjust = 1))
surv_plot <- ggplot(aes(x=Date, y=meansurv, colour = Bag_Col, group=Bag_Col))+
geom_errorbar(size = .75, aes(ymin=meansurv-semsurv, ymax=meansurv+semsurv))+
geom_line(size = .75)+
facet_grid(~Site)+
scale_colour_paletteer_d(("MoMAColors::Andri"), name = "Ploidy", labels = c("Induced Triploid", "Diploid", "Mated Triploid"))+
xlab("Date")+ ylab("Number of survivors (± SEM)")+
ggtitle("Number of survivors since experiment start")+
theme(axis.text.x = element_text(angle = 90, hjust = 1))
View(Spec_2324)
View(survdat)
ggplot(data = mean_survival_proportion, aes(x = Date, y = meansurv, colour = Bag_Col, group = Bag_Col)) +
geom_errorbar(size = 0.75, aes(ymin = meansurv - semsurv, ymax = meansurv + semsurv), width = 0.2) +
geom_line(size = 0.75) +
facet_grid(~ Site) +
scale_colour_paletteer_d("MoMAColors::Andri", name = "Ploidy", labels = c("Induced Triploid", "Diploid", "Mated Triploid")) +
xlab("Date") +
ylab("Number of survivors (± SEM)") +
ggtitle("Number of survivors since experiment start") +
theme(
axis.text.x = element_text(size = 12, angle = 90, hjust = 1),
axis.text.y = element_text(size = 12),
axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 14),
plot.title = element_text(size = 16, face = "bold"),
strip.text = element_text(size = 12),
legend.text = element_text(size = 12),
legend.title = element_text(size = 14),
legend.position = "bottom"  # Adjust legend position if needed
)
pH_plot
ggplot(data = mean_survival_proportion, aes(x = Date, y = meansurv, colour = Bag_Col, group = Bag_Col)) +
geom_errorbar(size = 0.75, aes(ymin = meansurv - semsurv, ymax = meansurv + semsurv), width = 0.2) +
geom_line(size = 0.75) +
facet_grid(~ Site) +
scale_colour_paletteer_d("MoMAColors::Andri", name = "Ploidy", labels = c("Induced Triploid", "Diploid", "Mated Triploid")) +
xlab("Date") +
ylab("Number of survivors (± SEM)") +
ggtitle("Number of survivors since experiment start") +
theme(
axis.text.x = element_text(size = 12, angle = 90, hjust = 1),
axis.text.y = element_text(size = 12),
axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 14),
plot.title = element_text(size = 16, face = "bold"),
strip.text = element_text(size = 12),
legend.text = element_text(size = 12),
legend.title = element_text(size = 14),
# Adjust legend position if needed
)
# plot
pH_plot = ggplot(data = averages, aes(x = Month_Year, y = average_pH, color = Site)) +
geom_line(size= .75, na.rm = TRUE) +
labs(
title = "Sampled Seawater pH Across Time and Sites",
x = "",
y = "pH",
color = "Site"
) +
scale_x_date(date_labels = "%Y-%m", date_breaks = "1 month")+
theme(
axis.text.x = element_text(size = 12, angle = 90, hjust = 1),
axis.text.y = element_text(size = 12),
axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 14),
plot.title = element_text(size = 16, face = "bold"),
strip.text = element_text(size = 12),
legend.text = element_text(size = 12),
legend.title = element_text(size = 14),
legend.position = "bottom" )
pH_plot
# plot
pH_plot = ggplot(data = averages, aes(x = Month_Year, y = average_pH, color = Site)) +
geom_line(size= .75, na.rm = TRUE) +
labs(
title = "Sampled Seawater pH Across Time and Sites",
x = "",
y = "pH",
color = "Site"
) +
scale_x_date(date_labels = "%Y-%m", date_breaks = "1 month")+
theme(
axis.text.x = element_text(size = 12, angle = 90, hjust = 1),
axis.text.y = element_text(size = 12),
axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 14),
plot.title = element_text(size = 16, face = "bold"),
strip.text = element_text(size = 12),
legend.text = element_text(size = 12),
legend.title = element_text(size = 14),
)
pH_plot
# plot
pH_plot = ggplot(data = averages, aes(x = Month_Year, y = average_pH, color = Site)) +
geom_line(size= .75, na.rm = TRUE) +
labs(
title = "Sampled Seawater pH Across Time and Sites",
x = "",
y = "pH",
color = "Site"
) +
scale_x_date(date_labels = "%Y-%m", date_breaks = "1 month")+
theme(
axis.text.x = element_text(size = 12, angle = 90, hjust = 1),
axis.text.y = element_text(size = 12),
axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 14),
plot.title = element_text(size = 18, face = "bold"),
strip.text = element_text(size = 12),
legend.text = element_text(size = 12),
legend.title = element_text(size = 14),
)
pH_plot
ggplot(data= daily_DOavg, aes(x = Date, y = Average_DO, color = Site)) +
geom_line(na.rm = TRUE) +
labs(title = "Seawater Oxygen Concentration Across Time and Sites" , x = " ", y = "Dissolved Oxygen (mg/L)", color = "Site")+
theme(
axis.text.x = element_text(size = 12, angle = 90, hjust = 1),
axis.text.y = element_text(size = 12),
axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 14),
plot.title = element_text(size = 18, face = "bold"),
strip.text = element_text(size = 12),
legend.text = element_text(size = 12),
legend.title = element_text(size = 14))
ggplot(data= daily_DOavg, aes(x = Date, y = Average_DO, color = Site)) +
geom_line(na.rm = TRUE) +
labs(title = "Seawater Oxygen Concentration Across Time and Sites" , x = " ", y = "Dissolved Oxygen (mg/L)", color = "Site")+
theme(
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 14),
plot.title = element_text(size = 18, face = "bold"),
strip.text = element_text(size = 12),
legend.text = element_text(size = 12),
legend.title = element_text(size = 14))
ggplot(data= weekly_tempavg, aes(x = Date, y = Average_Temp, color = Site)) +
geom_line(size = 0.75, na.rm = TRUE) +
labs(title = "Seawater Temperature Across Time and Sites", x = " ", y = "Temperature (C)", color = "Site")+
theme(
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 14),
plot.title = element_text(size = 18, face = "bold"),
strip.text = element_text(size = 12),
legend.text = element_text(size = 12),
legend.title = element_text(size = 14))
ggplot(data= weekly_DOavg, aes(x = Date, y = Average_DO, color = Site)) +
geom_line(size = 0.75, na.rm = TRUE) +
labs(title = "Seawater Oxygen Concentrations Across Time and Sites", x = " ", y = "Dissolved Oxygen (mg/L)", color = "Site")+
theme(
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 14),
plot.title = element_text(size = 18, face = "bold"),
strip.text = element_text(size = 12),
legend.text = element_text(size = 12),
legend.title = element_text(size = 14))
ggplot(data = mean_survival_proportion, aes(x = Date, y = meansurv, colour = Bag_Col, group = Bag_Col)) +
geom_errorbar(size = 0.75, aes(ymin = meansurv - semsurv, ymax = meansurv + semsurv), width = 0.2) +
geom_line(size = 0.75) +
facet_grid(~ Site) +
scale_colour_paletteer_d("MoMAColors::Andri", name = "Ploidy", labels = c("Induced Triploid", "Diploid", "Mated Triploid")) +
xlab("Date") +
ylab("Number of survivors (± SEM)") +
ggtitle("Number of survivors since experiment start") +
theme(
axis.text.x = element_text(size = 12, angle = 90, hjust = 1),
axis.text.y = element_text(size = 12),
axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 14),
plot.title = element_text(size = 16, face = "bold"),
strip.text = element_text(size = 12),
legend.text = element_text(size = 12),
legend.title = element_text(size = 14),
# Adjust legend position if needed
)
library(tidyverse)
library(here)
library(survival)
library(ggfortify)
library(ggsurvfit)
library(survminer)
library(gridExtra)
library(frailtyEM)
library(paletteer)
ggplot(data = mean_survival_proportion, aes(x = Date, y = meansurv, colour = Bag_Col, group = Bag_Col)) +
geom_errorbar(size = 0.75, aes(ymin = meansurv - semsurv, ymax = meansurv + semsurv), width = 0.2) +
geom_line(size = 0.75) +
facet_grid(~ Site) +
scale_colour_paletteer_d("MoMAColors::Andri", name = "Ploidy", labels = c("Induced Triploid", "Diploid", "Mated Triploid")) +
xlab("Date") +
ylab("Number of survivors (± SEM)") +
ggtitle("Number of survivors since experiment start") +
theme(
axis.text.x = element_text(size = 12, angle = 90, hjust = 1),
axis.text.y = element_text(size = 12),
axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 14),
plot.title = element_text(size = 16, face = "bold"),
strip.text = element_text(size = 12),
legend.text = element_text(size = 12),
legend.title = element_text(size = 14),
# Adjust legend position if needed
)
